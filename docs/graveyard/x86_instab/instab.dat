# this file contains instructions encoding characteristics from Intel
# see https://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.html
# inspired by how nasm is doing it: https://github.com/netwide-assembler/nasm/blob/master/x86/insns.dat

# anything starting with a has symbol is a comment.
# the format is copying from the PDF with minimal changes
# then we shall parse things as possible.

# the columns are: Opcode, Instruction, Op/En, 64-bit mode, Compat/Leg mode, Description

NOP:
NP 90 NOP ZO Valid Valid One byte no-operation instruction.
NP 0F 1F /0 NOP r/m16 M Valid Valid Multi-byte no-operation instruction.
NP 0F 1F /0 NOP r/m32 M Valid Valid Multi-byte no-operation instruction.

MOV:
88 /r MOV r/m8, r8 MR Valid Valid Move r8 to r/m8.
REX + 88 /r MOV r/m81, r81 MR Valid N.E. Move r8 to r/m8.
89 /r MOV r/m16, r16 MR Valid Valid Move r16 to r/m16.
89 /r MOV r/m32, r32 MR Valid Valid Move r32 to r/m32.
REX.W + 89 /r MOV r/m64, r64 MR Valid N.E. Move r64 to r/m64.
8A /r MOV r8, r/m8 RM Valid Valid Move r/m8 to r8.
REX + 8A /r MOV r81, r/m81 RM Valid N.E. Move r/m8 to r8.
8B /r MOV r16, r/m16 RM Valid Valid Move r/m16 to r16.
8B /r MOV r32, r/m32 RM Valid Valid Move r/m32 to r32.
REX.W + 8B /r MOV r64, r/m64 RM Valid N.E. Move r/m64 to r64.
8C /r MOV r/m16, Sreg MR Valid Valid Move segment register to r/m16.
8C /r MOV r16/r32/m16, Sreg MR Valid Valid Move zero extended 16-bit segment register to r16/r32/m16.
REX.W + 8C /r MOV r64/m16, Sreg MR Valid Valid Move zero extended 16-bit segment register to r64/m16.
8E /r MOV Sreg, r/m162 RM Valid Valid Move r/m16 to segment register.
REX.W + 8E /r MOV Sreg, r/m642 RM Valid Valid Move lower 16 bits of r/m64 to segment register.
A0 MOV AL, moffs83 FD Valid Valid Move byte at (seg:offset) to AL.
REX.W + A0 MOV AL, moffs83 FD Valid N.E. Move byte at (offset) to AL.
A1 MOV AX, moffs163 FD Valid Valid Move word at (seg:offset) to AX.
A1 MOV EAX, moffs323 FD Valid Valid Move doubleword at (seg:offset) to EAX.
REX.W + A1 MOV RAX, moffs643 FD Valid N.E. Move quadword at (offset) to RAX.
A2 MOV moffs8, AL TD Valid Valid Move AL to (seg:offset).
REX.W + A2 MOV moffs81, AL TD Valid N.E. Move AL to (offset).
A3 MOV moffs163, AX TD Valid Valid Move AX to (seg:offset).
A3 MOV moffs323, EAX TD Valid Valid Move EAX to (seg:offset).
REX.W + A3 MOV moffs643, RAX TD Valid N.E. Move RAX to (offset).
B0+ rb ib MOV r8, imm8 OI Valid Valid Move imm8 to r8.
REX + B0+ rb ib MOV r81, imm8 OI Valid N.E. Move imm8 to r8.
B8+ rw iw MOV r16, imm16 OI Valid Valid Move imm16 to r16.
B8+ rd id MOV r32, imm32 OI Valid Valid Move imm32 to r32.
REX.W + B8+ rd io MOV r64, imm64 OI Valid N.E. Move imm64 to r64.
C6 /0 ib MOV r/m8, imm8 MI Valid Valid Move imm8 to r/m8.
REX + C6 /0 ib MOV r/m81, imm8 MI Valid N.E. Move imm8 to r/m8.
C7 /0 iw MOV r/m16, imm16 MI Valid Valid Move imm16 to r/m16.
C7 /0 id MOV r/m32, imm32 MI Valid Valid Move imm32 to r/m32.
REX.W + C7 /0 id MOV r/m64, imm32 MI Valid N.E. Move imm32 sign extended to 64-bits to r/m64

PUSH:
FF /6 PUSH r/m16 M Valid Valid Push r/m16.
FF /6 PUSH r/m32 M N.E. Valid Push r/m32.
FF /6 PUSH r/m64 M Valid N.E. Push r/m64.
50+rw PUSH r16 O Valid Valid Push r16.
50+rd PUSH r32 O N.E. Valid Push r32.
50+rd PUSH r64 O Valid N.E. Push r64.
6A ib PUSH imm8 I Valid Valid Push imm8.
68 iw PUSH imm16 I Valid Valid Push imm16.
68 id PUSH imm32 I Valid Valid Push imm32.
0E PUSH CS ZO Invalid Valid Push CS.
16 PUSH SS ZO Invalid Valid Push SS.
1E PUSH DS ZO Invalid Valid Push DS.
06 PUSH ES ZO Invalid Valid Push ES.
0F A0 PUSH FS ZO Valid Valid Push FS.
0F A8 PUSH GS ZO Valid Valid Push GS.

POP:
8F /0 POP r/m16 M Valid Valid Pop top of stack into m16; increment stack pointer.
8F /0 POP r/m32 M N.E. Valid Pop top of stack into m32; increment stack pointer.
8F /0 POP r/m64 M Valid N.E. Pop top of stack into m64; increment stack pointer. Cannot encode 32-bit operand size.
58+ rw POP r16 O Valid Valid Pop top of stack into r16; increment stack pointer.
58+ rd POP r32 O N.E. Valid Pop top of stack into r32; increment stack pointer.
58+ rd POP r64 O Valid N.E. Pop top of stack into r64; increment stack pointer. Cannot encode 32-bit operand size.
1F POP DS ZO Invalid Valid Pop top of stack into DS; increment stack pointer.
07 POP ES ZO Invalid Valid Pop top of stack into ES; increment stack pointer.
17 POP SS ZO Invalid Valid Pop top of stack into SS; increment stack pointer.
0F A1 POP FS ZO Valid Valid Pop top of stack into FS; increment stack pointer by 16 bits.
0F A1 POP FS ZO N.E. Valid Pop top of stack into FS; increment stack pointer by 32 bits.
0F A1 POP FS ZO Valid N.E. Pop top of stack into FS; increment stack pointer by 64 bits.
0F A9 POP GS ZO Valid Valid Pop top of stack into GS; increment stack pointer by 16 bits.
0F A9 POP GS ZO N.E. Valid Pop top of stack into GS; increment stack pointer by 32 bits.
0F A9 POP GS ZO Valid N.E. Pop top of stack into GS; increment stack pointer by 64 bits.

LEA:
8D /r LEA r16,m RM Valid Valid Store effective address for m in register r16.
8D /r LEA r32,m RM Valid Valid Store effective address for m in register r32.
REX.W + 8D /r LEA r64,m RM Valid N.E. Store effective address for m in register r64. 

ADD:
04 ib ADD AL, imm8 I Valid Valid Add imm8 to AL.
05 iw ADD AX, imm16 I Valid Valid Add imm16 to AX.
05 id ADD EAX, imm32 I Valid Valid Add imm32 to EAX.
REX.W + 05 id ADD RAX, imm32 I Valid N.E. Add imm32 sign-extended to 64-bits to RAX.
80 /0 ib ADD r/m8, imm8 MI Valid Valid Add imm8 to r/m8.
REX + 80 /0 ib ADD r/m8*, imm8 MI Valid N.E. Add sign-extended imm8 to r/m8.
81 /0 iw ADD r/m16, imm16 MI Valid Valid Add imm16 to r/m16.
81 /0 id ADD r/m32, imm32 MI Valid Valid Add imm32 to r/m32.
REX.W + 81 /0 id ADD r/m64, imm32 MI Valid N.E. Add imm32 sign-extended to 64-bits to r/m64.
83 /0 ib ADD r/m16, imm8 MI Valid Valid Add sign-extended imm8 to r/m16.
83 /0 ib ADD r/m32, imm8 MI Valid Valid Add sign-extended imm8 to r/m32.
REX.W + 83 /0 ib ADD r/m64, imm8 MI Valid N.E. Add sign-extended imm8 to r/m64.
00 /r ADD r/m8, r8 MR Valid Valid Add r8 to r/m8.
REX + 00 /r ADD r/m8*, r8* MR Valid N.E. Add r8 to r/m8.
01 /r ADD r/m16, r16 MR Valid Valid Add r16 to r/m16.
01 /r ADD r/m32, r32 MR Valid Valid Add r32 to r/m32.
REX.W + 01 /r ADD r/m64, r64 MR Valid N.E. Add r64 to r/m64.
02 /r ADD r8, r/m8 RM Valid Valid Add r/m8 to r8.
REX + 02 /r ADD r8*, r/m8* RM Valid N.E. Add r/m8 to r8.
03 /r ADD r16, r/m16 RM Valid Valid Add r/m16 to r16.
03 /r ADD r32, r/m32 RM Valid Valid Add r/m32 to r32.
REX.W + 03 /r ADD r64, r/m64 RM Valid N.E. Add r/m64 to r64.


SUB:
2C ib SUB AL, imm8 I Valid Valid Subtract imm8 from AL.
2D iw SUB AX, imm16 I Valid Valid Subtract imm16 from AX.
2D id SUB EAX, imm32 I Valid Valid Subtract imm32 from EAX.
REX.W + 2D id SUB RAX, imm32 I Valid N.E. Subtract imm32 sign-extended to 64-bits from RAX.
80 /5 ib SUB r/m8, imm8 MI Valid Valid Subtract imm8 from r/m8.
REX + 80 /5 ib SUB r/m81, imm8 MI Valid N.E. Subtract imm8 from r/m8.
81 /5 iw SUB r/m16, imm16 MI Valid Valid Subtract imm16 from r/m16.
81 /5 id SUB r/m32, imm32 MI Valid Valid Subtract imm32 from r/m32.
REX.W + 81 /5 id SUB r/m64, imm32 MI Valid N.E. Subtract imm32 sign-extended to 64-bits from r/m64.
83 /5 ib SUB r/m16, imm8 MI Valid Valid Subtract sign-extended imm8 from r/m16.
83 /5 ib SUB r/m32, imm8 MI Valid Valid Subtract sign-extended imm8 from r/m32.
REX.W + 83 /5 ib SUB r/m64, imm8 MI Valid N.E. Subtract sign-extended imm8 from r/m64.
28 /r SUB r/m8, r8 MR Valid Valid Subtract r8 from r/m8.
REX + 28 /r SUB r/m81, r81 MR Valid N.E. Subtract r8 from r/m8.
29 /r SUB r/m16, r16 MR Valid Valid Subtract r16 from r/m16.
29 /r SUB r/m32, r32 MR Valid Valid Subtract r32 from r/m32.
REX.W + 29 /r SUB r/m64, r64 MR Valid N.E. Subtract r64 from r/m64.
2A /r SUB r8, r/m8 RM Valid Valid Subtract r/m8 from r8.
REX + 2A /r SUB r81, r/m81 RM Valid N.E. Subtract r/m8 from r8.
2B /r SUB r16, r/m16 RM Valid Valid Subtract r/m16 from r16.
2B /r SUB r32, r/m32 RM Valid Valid Subtract r/m32 from r32.
REX.W + 2B /r SUB r64, r/m64 RM Valid N.E. Subtract r/m64 from r64.

INC:
FE /0 INC r/m8 M Valid Valid Increment r/m byte by 1.
REX + FE /0 INC r/m81 M Valid N.E. Increment r/m byte by 1.
FF /0 INC r/m16 M Valid Valid Increment r/m word by 1.
FF /0 INC r/m32 M Valid Valid Increment r/m doubleword by 1.
REX.W + FF /0 INC r/m64 M Valid N.E. Increment r/m quadword by 1.
40+ rw2 INC r16 O N.E. Valid Increment word register by 1.
40+ rd INC r32 O N.E. Valid Increment doubleword register by 1.

DEC:
FE /1 DEC r/m8 M Valid Valid Decrement r/m8 by 1.
REX + FE /1 DEC r/m8* M Valid N.E. Decrement r/m8 by 1.
FF /1 DEC r/m16 M Valid Valid Decrement r/m16 by 1.
FF /1 DEC r/m32 M Valid Valid Decrement r/m32 by 1.
REX.W + FF /1 DEC r/m64 M Valid N.E. Decrement r/m64 by 1.
48+rw DEC r16 O N.E. Valid Decrement r16 by 1.
48+rd DEC r32 O N.E. Valid Decrement r32 by 1.

IMUL:
F6 /5 IMUL r/m81 M Valid Valid AX:= AL ∗ r/m byte.
F7 /5 IMUL r/m16 M Valid Valid DX:AX := AX ∗ r/m word.
F7 /5 IMUL r/m32 M Valid Valid EDX:EAX := EAX ∗ r/m32.
REX.W + F7 /5 IMUL r/m64 M Valid N.E. RDX:RAX := RAX ∗ r/m64.
0F AF /r IMUL r16, r/m16 RM Valid Valid word register := word register ∗ r/m16.
0F AF /r IMUL r32, r/m32 RM Valid Valid doubleword register := doubleword register ∗ r/m32.
REX.W + 0F AF /r IMUL r64, r/m64 RM Valid N.E. Quadword register := Quadword register ∗ r/m64.
6B /r ib IMUL r16, r/m16, imm8 RMI Valid Valid word register := r/m16 ∗ sign-extended immediate byte.
6B /r ib IMUL r32, r/m32, imm8 RMI Valid Valid doubleword register := r/m32 ∗ signextended immediate byte.
REX.W + 6B /r ib IMUL r64, r/m64, imm8 RMI Valid N.E. Quadword register := r/m64 ∗ sign-extended immediate byte.
69 /r iw IMUL r16, r/m16, imm16 RMI Valid Valid word register := r/m16 ∗ immediate word.
69 /r id IMUL r32, r/m32, imm32 RMI Valid Valid doubleword register := r/m32 ∗ immediate doubleword.
REX.W + 69 /r id IMUL r64, r/m64, imm32 RMI Valid N.E. Quadword register := r/m64 ∗ immediate doubleword.

IDIV:
F6 /7 IDIV r/m8 M Valid Valid Signed divide AX by r/m8, with result stored in: AL := Quotient, AH := Remainder.
REX + F6 /7 IDIV r/m81 M Valid N.E. Signed divide AX by r/m8, with result stored in AL := Quotient, AH := Remainder.
F7 /7 IDIV r/m16 M Valid Valid Signed divide DX:AX by r/m16, with result stored in AX := Quotient, DX := Remainder.
F7 /7 IDIV r/m32 M Valid Valid Signed divide EDX:EAX by r/m32, with result stored in EAX := Quotient, EDX := Remainder.
REX.W + F7 /7 IDIV r/m64 M Valid N.E. Signed divide RDX:RAX by r/m64, with result stored in RAX := Quotient, RDX := Remainder.

AND:
24 ib AND AL, imm8 I Valid Valid AL AND imm8.
25 iw AND AX, imm16 I Valid Valid AX AND imm16.
25 id AND EAX, imm32 I Valid Valid EAX AND imm32.
REX.W + 25 id AND RAX, imm32 I Valid N.E. RAX AND imm32 sign-extended to 64-bits.
80 /4 ib AND r/m8, imm8 MI Valid Valid r/m8 AND imm8.
REX + 80 /4 ib AND r/m8*, imm8 MI Valid N.E. r/m8 AND imm8.
81 /4 iw AND r/m16, imm16 MI Valid Valid r/m16 AND imm16.
81 /4 id AND r/m32, imm32 MI Valid Valid r/m32 AND imm32.
REX.W + 81 /4 id AND r/m64, imm32 MI Valid N.E. r/m64 AND imm32 sign extended to 64-bits.
83 /4 ib AND r/m16, imm8 MI Valid Valid r/m16 AND imm8 (sign-extended).
83 /4 ib AND r/m32, imm8 MI Valid Valid r/m32 AND imm8 (sign-extended).
REX.W + 83 /4 ib AND r/m64, imm8 MI Valid N.E. r/m64 AND imm8 (sign-extended).
20 /r AND r/m8, r8 MR Valid Valid r/m8 AND r8.
REX + 20 /r AND r/m8*, r8* MR Valid N.E. r/m64 AND r8 (sign-extended).
21 /r AND r/m16, r16 MR Valid Valid r/m16 AND r16.
21 /r AND r/m32, r32 MR Valid Valid r/m32 AND r32.
REX.W + 21 /r AND r/m64, r64 MR Valid N.E. r/m64 AND r32.
22 /r AND r8, r/m8 RM Valid Valid r8 AND r/m8.
REX + 22 /r AND r8*, r/m8* RM Valid N.E. r/m64 AND r8 (sign-extended).
23 /r AND r16, r/m16 RM Valid Valid r16 AND r/m16.
23 /r AND r32, r/m32 RM Valid Valid r32 AND r/m32.
REX.W + 23 /r AND r64, r/m64 RM Valid N.E. r64 AND r/m64.

OR:
0C ib OR AL, imm8 I Valid Valid AL OR imm8.
0D iw OR AX, imm16 I Valid Valid AX OR imm16.
0D id OR EAX, imm32 I Valid Valid EAX OR imm32.
REX.W + 0D id OR RAX, imm32 I Valid N.E. RAX OR imm32 (sign-extended).
80 /1 ib OR r/m8, imm8 MI Valid Valid r/m8 OR imm8.
REX + 80 /1 ib OR r/m81, imm8 MI Valid N.E. r/m8 OR imm8.
81 /1 iw OR r/m16, imm16 MI Valid Valid r/m16 OR imm16.
81 /1 id OR r/m32, imm32 MI Valid Valid r/m32 OR imm32.
REX.W + 81 /1 id OR r/m64, imm32 MI Valid N.E. r/m64 OR imm32 (sign-extended).
83 /1 ib OR r/m16, imm8 MI Valid Valid r/m16 OR imm8 (sign-extended).
83 /1 ib OR r/m32, imm8 MI Valid Valid r/m32 OR imm8 (sign-extended).
REX.W + 83 /1 ib OR r/m64, imm8 MI Valid N.E. r/m64 OR imm8 (sign-extended).
08 /r OR r/m8, r8 MR Valid Valid r/m8 OR r8.
REX + 08 /r OR r/m81, r81 MR Valid N.E. r/m8 OR r8.
09 /r OR r/m16, r16 MR Valid Valid r/m16 OR r16.
09 /r OR r/m32, r32 MR Valid Valid r/m32 OR r32.
REX.W + 09 /r OR r/m64, r64 MR Valid N.E. r/m64 OR r64.
0A /r OR r8, r/m8 RM Valid Valid r8 OR r/m8.
REX + 0A /r OR r81, r/m81 RM Valid N.E. r8 OR r/m8.
0B /r OR r16, r/m16 RM Valid Valid r16 OR r/m16.
0B /r OR r32, r/m32 RM Valid Valid r32 OR r/m32.
REX.W + 0B /r OR r64, r/m64 RM Valid N.E. r64 OR r/m64.

XOR:
34 ib XOR AL, imm8 I Valid Valid AL XOR imm8.
35 iw XOR AX, imm16 I Valid Valid AX XOR imm16.
35 id XOR EAX, imm32 I Valid Valid EAX XOR imm32.
REX.W + 35 id XOR RAX, imm32 I Valid N.E. RAX XOR imm32 (sign-extended).
80 /6 ib XOR r/m8, imm8 MI Valid Valid r/m8 XOR imm8.
REX + 80 /6 ib XOR r/m8*, imm8 MI Valid N.E. r/m8 XOR imm8.
81 /6 iw XOR r/m16, imm16 MI Valid Valid r/m16 XOR imm16.
81 /6 id XOR r/m32, imm32 MI Valid Valid r/m32 XOR imm32.
REX.W + 81 /6 id XOR r/m64, imm32 MI Valid N.E. r/m64 XOR imm32 (sign-extended).
83 /6 ib XOR r/m16, imm8 MI Valid Valid r/m16 XOR imm8 (sign-extended).
83 /6 ib XOR r/m32, imm8 MI Valid Valid r/m32 XOR imm8 (sign-extended).
RREX.W + 83 /6 ib XOR r/m64, imm8 MI Valid N.E. r/m64 XOR imm8 (sign-extended).
30 /r XOR r/m8, r8 MR Valid Valid r/m8 XOR r8.
REX + 30 /r XOR r/m8*, r8* MR Valid N.E. r/m8 XOR r8.
31 /r XOR r/m16, r16 MR Valid Valid r/m16 XOR r16.
31 /r XOR r/m32, r32 MR Valid Valid r/m32 XOR r32.
REX.W + 31 /r XOR r/m64, r64 MR Valid N.E. r/m64 XOR r64.
32 /r XOR r8, r/m8 RM Valid Valid r8 XOR r/m8.
REX + 32 /r XOR r8*, r/m8* RM Valid N.E. r8 XOR r/m8.
33 /r XOR r16, r/m16 RM Valid Valid r16 XOR r/m16.
33 /r XOR r32, r/m32 RM Valid Valid r32 XOR r/m32.
REX.W + 33 /r XOR r64, r/m64 RM Valid N.E. r64 XOR r/m64.

NOT:
F6 /2 NOT r/m8 M Valid Valid Reverse each bit of r/m8.
REX + F6 /2 NOT r/m81 M Valid N.E. Reverse each bit of r/m8.
F7 /2 NOT r/m16 M Valid Valid Reverse each bit of r/m16.
F7 /2 NOT r/m32 M Valid Valid Reverse each bit of r/m32.
REX.W + F7 /2 NOT r/m64 M Valid N.E. Reverse each bit of r/m64.

NEG:
F6 /3 NEG r/m8 M Valid Valid Two's complement negate r/m8.
REX + F6 /3 NEG r/m81 M Valid N.E. Two's complement negate r/m8.
F7 /3 NEG r/m16 M Valid Valid Two's complement negate r/m16.
F7 /3 NEG r/m32 M Valid Valid Two's complement negate r/m32.
REX.W + F7 /3 NEG r/m64 M Valid N.E. Two's complement negate r/m64.

SHL:
D0 /4 SHL r/m8, 1 M1 Valid Valid Multiply r/m8 by 2, once.
REX + D0 /4 SHL r/m82, 1 M1 Valid N.E. Multiply r/m8 by 2, once.
D2 /4 SHL r/m8, CL MC Valid Valid Multiply r/m8 by 2, CL times.
REX + D2 /4 SHL r/m82, CL MC Valid N.E. Multiply r/m8 by 2, CL times.
C0 /4 ib SHL r/m8, imm8 MI Valid Valid Multiply r/m8 by 2, imm8 times.
REX + C0 /4 ib SHL r/m82, imm8 MI Valid N.E. Multiply r/m8 by 2, imm8 times.
D1 /4 SHL r/m16,1 M1 Valid Valid Multiply r/m16 by 2, once.
D3 /4 SHL r/m16, CL MC Valid Valid Multiply r/m16 by 2, CL times.
C1 /4 ib SHL r/m16, imm8 MI Valid Valid Multiply r/m16 by 2, imm8 times.
D1 /4 SHL r/m32,1 M1 Valid Valid Multiply r/m32 by 2, once.
REX.W + D1 /4 SHL r/m64,1 M1 Valid N.E. Multiply r/m64 by 2, once.
D3 /4 SHL r/m32, CL MC Valid Valid Multiply r/m32 by 2, CL times.
REX.W + D3 /4 SHL r/m64, CL MC Valid N.E. Multiply r/m64 by 2, CL times.
C1 /4 ib SHL r/m32, imm8 MI Valid Valid Multiply r/m32 by 2, imm8 times.
REX.W + C1 /4 ib SHL r/m64, imm8 MI Valid N.E. Multiply r/m64 by 2, imm8 times.

SHR:
D0 /5 SHR r/m8,1 M1 Valid Valid Unsigned divide r/m8 by 2, once.
REX + D0 /5 SHR r/m82, 1 M1 Valid N.E. Unsigned divide r/m8 by 2, once.
D2 /5 SHR r/m8, CL MC Valid Valid Unsigned divide r/m8 by 2, CL times.
REX + D2 /5 SHR r/m82, CL MC Valid N.E. Unsigned divide r/m8 by 2, CL times.
C0 /5 ib SHR r/m8, imm8 MI Valid Valid Unsigned divide r/m8 by 2, imm8 times.
REX + C0 /5 ib SHR r/m82, imm8 MI Valid N.E. Unsigned divide r/m8 by 2, imm8 times.
D1 /5 SHR r/m16, 1 M1 Valid Valid Unsigned divide r/m16 by 2, once.
D3 /5 SHR r/m16, CL MC Valid Valid Unsigned divide r/m16 by 2, CL times
C1 /5 ib SHR r/m16, imm8 MI Valid Valid Unsigned divide r/m16 by 2, imm8 times.
D1 /5 SHR r/m32, 1 M1 Valid Valid Unsigned divide r/m32 by 2, once.
REX.W + D1 /5 SHR r/m64, 1 M1 Valid N.E. Unsigned divide r/m64 by 2, once.
D3 /5 SHR r/m32, CL MC Valid Valid Unsigned divide r/m32 by 2, CL times.
REX.W + D3 /5 SHR r/m64, CL MC Valid N.E. Unsigned divide r/m64 by 2, CL times.
C1 /5 ib SHR r/m32, imm8 MI Valid Valid Unsigned divide r/m32 by 2, imm8 times.
REX.W + C1 /5 ib SHR r/m64, imm8 MI Valid N.E. Unsigned divide r/m64 by 2, imm8 times.

JMP:
EB cb JMP rel8 D Valid Valid Jump short, RIP = RIP + 8-bit displacement sign extended to 64-bits.
E9 cw JMP rel16 D N.S. Valid Jump near, relative, displacement relative to next instruction. Not supported in 64-bit mode.
E9 cd JMP rel32 D Valid Valid Jump near, relative, RIP = RIP + 32-bit displacement sign extended to 64-bits.
FF /4 JMP r/m16 M N.S. Valid Jump near, absolute indirect, address = zeroextended r/m16. Not supported in 64-bit mode.
FF /4 JMP r/m32 M N.S. Valid Jump near, absolute indirect, address given in r/m32. Not supported in 64-bit mode.
FF /4 JMP r/m64 M Valid N.E. Jump near, absolute indirect, RIP = 64-Bit offset from register or memory.
EA cd JMP ptr16:16 S Inv. Valid Jump far, absolute, address given in operand.
EA cp JMP ptr16:32 S Inv. Valid Jump far, absolute, address given in operand.
FF /5 JMP m16:16 M Valid Valid Jump far, absolute indirect, address given in m16:16.
FF /5 JMP m16:32 M Valid Valid Jump far, absolute indirect, address given in m16:32.
REX.W FF /5 JMP m16:64 M Valid N.E. Jump far, absolute indirect, address given in m16:64.

CMP:
3C ib CMP AL, imm8 I Valid Valid Compare imm8 with AL.
3D iw CMP AX, imm16 I Valid Valid Compare imm16 with AX.
3D id CMP EAX, imm32 I Valid Valid Compare imm32 with EAX.
REX.W + 3D id CMP RAX, imm32 I Valid N.E. Compare imm32 sign-extended to 64-bits with RAX.
80 /7 ib CMP r/m8, imm8 MI Valid Valid Compare imm8 with r/m8.
REX + 80 /7 ib CMP r/m8*, imm8 MI Valid N.E. Compare imm8 with r/m8.
81 /7 iw CMP r/m16, imm16 MI Valid Valid Compare imm16 with r/m16.
81 /7 id CMP r/m32, imm32 MI Valid Valid Compare imm32 with r/m32.
REX.W + 81 /7 id CMP r/m64, imm32 MI Valid N.E. Compare imm32 sign-extended to 64-bits with r/m64.
83 /7 ib CMP r/m16, imm8 MI Valid Valid Compare imm8 with r/m16.
83 /7 ib CMP r/m32, imm8 MI Valid Valid Compare imm8 with r/m32.
REX.W + 83 /7 ib CMP r/m64, imm8 MI Valid N.E. Compare imm8 with r/m64.
38 /r CMP r/m8, r8 MR Valid Valid Compare r8 with r/m8.
REX + 38 /r CMP r/m8*, r8* MR Valid N.E. Compare r8 with r/m8.
39 /r CMP r/m16, r16 MR Valid Valid Compare r16 with r/m16.
39 /r CMP r/m32, r32 MR Valid Valid Compare r32 with r/m32.
REX.W + 39 /r CMP r/m64,r64 MR Valid N.E. Compare r64 with r/m64.
3A /r CMP r8, r/m8 RM Valid Valid Compare r/m8 with r8.
REX + 3A /r CMP r8*, r/m8* RM Valid N.E. Compare r/m8 with r8.
3B /r CMP r16, r/m16 RM Valid Valid Compare r/m16 with r16.
3B /r CMP r32, r/m32 RM Valid Valid Compare r/m32 with r32.
REX.W + 3B /r CMP r64, r/m64 RM Valid N.E. Compare r/m64 with r64.

JA:
77 cb JA rel8 D Valid Valid Jump short if above (CF=0 and ZF=0).
0F 87 cw JA rel16 D N.S. Valid Jump near if above (CF=0 and ZF=0). Not supported in 64-bit mode.
0F 87 cd JA rel32 D Valid Valid Jump near if above (CF=0 and ZF=0).

JAE:
73 cb JAE rel8 D Valid Valid Jump short if above or equal (CF=0).
0F 83 cw JAE rel16 D N.S. Valid Jump near if above or equal (CF=0). Not supported in 64-bit mode.
0F 83 cd JAE rel32 D Valid Valid Jump near if above or equal (CF=0).

JB:
72 cb JB rel8 D Valid Valid Jump short if below (CF=1).
0F 82 cw JB rel16 D N.S. Valid Jump near if below (CF=1). Not supported in 64-bit mode.
0F 82 cd JB rel32 D Valid Valid Jump near if below (CF=1).

JBE:
76 cb JBE rel8 D Valid Valid Jump short if below or equal (CF=1 or ZF=1).
0F 86 cw JBE rel16 D N.S. Valid Jump near if below or equal (CF=1 or ZF=1). Not supported in 64-bit mode.
0F 86 cd JBE rel32 D Valid Valid Jump near if below or equal (CF=1 or ZF=1).

JC:
72 cb JC rel8 D Valid Valid Jump short if carry (CF=1).
0F 82 cw JC rel16 D N.S. Valid Jump near if carry (CF=1). Not supported in 64-bit mode.
0F 82 cd JC rel32 D Valid Valid Jump near if carry (CF=1).

JCXZ:
E3 cb JCXZ rel8 D N.E. Valid Jump short if CX register is 0.

JECXZ:
E3 cb JECXZ rel8 D Valid Valid Jump short if ECX register is 0.

JRCXZ:
E3 cb JRCXZ rel8 D Valid N.E. Jump short if RCX register is 0.

JE:
74 cb JE rel8 D Valid Valid Jump short if equal (ZF=1).
0F 84 cw JE rel16 D N.S. Valid Jump near if equal (ZF=1). Not supported in 64-bit mode.
0F 84 cd JE rel32 D Valid Valid Jump near if equal (ZF=1).

JZ:
0F 84 cw JZ rel16 D N.S. Valid Jump near if 0 (ZF=1). Not supported in 64-bit mode.
0F 84 cd JZ rel32 D Valid Valid Jump near if 0 (ZF=1).

JG:
7F cb JG rel8 D Valid Valid Jump short if greater (ZF=0 and SF=OF).
0F 8F cw JG rel16 D N.S. Valid Jump near if greater (ZF=0 and SF=OF). Not supported in 64-bit mode.
0F 8F cd JG rel32 D Valid Valid Jump near if greater (ZF=0 and SF=OF).

JGE:
7D cb JGE rel8 D Valid Valid Jump short if greater or equal (SF=OF).
0F 8D cw JGE rel16 D N.S. Valid Jump near if greater or equal (SF=OF). Not supported in 64-bit mode.
0F 8D cd JGE rel32 D Valid Valid Jump near if greater or equal (SF=OF).

JL:
7C cb JL rel8 D Valid Valid Jump short if less (SF≠ OF).
0F 8C cw JL rel16 D N.S. Valid Jump near if less (SF≠ OF). Not supported in 64-bit mode.
0F 8C cd JL rel32 D Valid Valid Jump near if less (SF≠ OF).

JLE:
7E cb JLE rel8 D Valid Valid Jump short if less or equal (ZF=1 or SF≠ OF).
0F 8E cw JLE rel16 D N.S. Valid Jump near if less or equal (ZF=1 or SF≠ OF). Not supported in 64-bit mode.
0F 8E cd JLE rel32 D Valid Valid Jump near if less or equal (ZF=1 or SF≠ OF).

JNA:
76 cb JNA rel8 D Valid Valid Jump short if not above (CF=1 or ZF=1).
0F 86 cw JNA rel16 D N.S. Valid Jump near if not above (CF=1 or ZF=1). Not supported in 64-bit mode.
0F 86 cd JNA rel32 D Valid Valid Jump near if not above (CF=1 or ZF=1).

JNAE:
72 cb JNAE rel8 D Valid Valid Jump short if not above or equal (CF=1).
0F 82 cw JNAE rel16 D N.S. Valid Jump near if not above or equal (CF=1). Not supported in 64-bit mode.
0F 82 cd JNAE rel32 D Valid Valid Jump near if not above or equal (CF=1).

JNB:
73 cb JNB rel8 D Valid Valid Jump short if not below (CF=0).
0F 83 cw JNB rel16 D N.S. Valid Jump near if not below (CF=0). Not supported in 64-bit mode.
0F 83 cd JNB rel32 D Valid Valid Jump near if not below (CF=0).

JNBE:
77 cb JNBE rel8 D Valid Valid Jump short if not below or equal (CF=0 and ZF=0).
0F 87 cw JNBE rel16 D N.S. Valid Jump near if not below or equal (CF=0 and ZF=0). Not supported in 64-bit mode.
0F 87 cd JNBE rel32 D Valid Valid Jump near if not below or equal (CF=0 and ZF=0).

JNC:
73 cb JNC rel8 D Valid Valid Jump short if not carry (CF=0).
0F 83 cw JNC rel16 D N.S. Valid Jump near if not carry (CF=0). Not supported in 64-bit mode.
0F 83 cd JNC rel32 D Valid Valid Jump near if not carry (CF=0).

JNE:
75 cb JNE rel8 D Valid Valid Jump short if not equal (ZF=0).
0F 85 cw JNE rel16 D N.S. Valid Jump near if not equal (ZF=0). Not supported in 64-bit mode.
0F 85 cd JNE rel32 D Valid Valid Jump near if not equal (ZF=0).

JNG:
7E cb JNG rel8 D Valid Valid Jump short if not greater (ZF=1 or SF≠ OF).
0F 8E cw JNG rel16 D N.S. Valid Jump near if not greater (ZF=1 or SF≠ OF). Not supported in 64-bit mode.
0F 8E cd JNG rel32 D Valid Valid Jump near if not greater (ZF=1 or SF≠ OF).

JNGE:
7C cb JNGE rel8 D Valid Valid Jump short if not greater or equal (SF≠ OF).
0F 8C cw JNGE rel16 D N.S. Valid Jump near if not greater or equal (SF≠ OF). Not supported in 64-bit mode.
0F 8C cd JNGE rel32 D Valid Valid Jump near if not greater or equal (SF≠ OF).

JNL:
7D cb JNL rel8 D Valid Valid Jump short if not less (SF=OF).
0F 8D cw JNL rel16 D N.S. Valid Jump near if not less (SF=OF). Not supported in 64-bit mode.
0F 8D cd JNL rel32 D Valid Valid Jump near if not less (SF=OF).

JNLE:
7F cb JNLE rel8 D Valid Valid Jump short if not less or equal (ZF=0 and SF=OF).
0F 8F cw JNLE rel16 D N.S. Valid Jump near if not less or equal (ZF=0 and SF=OF). Not supported in 64-bit mode.
0F 8F cd JNLE rel32 D Valid Valid Jump near if not less or equal (ZF=0 and SF=OF).

JNO:
71 cb JNO rel8 D Valid Valid Jump short if not overflow (OF=0).
0F 81 cw JNO rel16 D N.S. Valid Jump near if not overflow (OF=0). Not supported in 64-bit mode.
0F 81 cd JNO rel32 D Valid Valid Jump near if not overflow (OF=0).

JNP:
7B cb JNP rel8 D Valid Valid Jump short if not parity (PF=0).
0F 8B cw JNP rel16 D N.S. Valid Jump near if not parity (PF=0). Not supported in 64-bit mode.
0F 8B cd JNP rel32 D Valid Valid Jump near if not parity (PF=0).

JNS:
79 cb JNS rel8 D Valid Valid Jump short if not sign (SF=0).
0F 89 cw JNS rel16 D N.S. Valid Jump near if not sign (SF=0). Not supported in 64-bit mode.
0F 89 cd JNS rel32 D Valid Valid Jump near if not sign (SF=0).

JNZ:
75 cb JNZ rel8 D Valid Valid Jump short if not zero (ZF=0).
0F 85 cw JNZ rel16 D N.S. Valid Jump near if not zero (ZF=0). Not supported in 64-bit mode.
0F 85 cd JNZ rel32 D Valid Valid Jump near if not zero (ZF=0).

JO:
70 cb JO rel8 D Valid Valid Jump short if overflow (OF=1).
0F 80 cw JO rel16 D N.S. Valid Jump near if overflow (OF=1). Not supported in 64-bit mode.
0F 80 cd JO rel32 D Valid Valid Jump near if overflow (OF=1).

JP:
7A cb JP rel8 D Valid Valid Jump short if parity (PF=1).
0F 8A cw JP rel16 D N.S. Valid Jump near if parity (PF=1). Not supported in 64-bit mode.
0F 8A cd JP rel32 D Valid Valid Jump near if parity (PF=1).

JPE:
7A cb JPE rel8 D Valid Valid Jump short if parity even (PF=1).
0F 8A cw JPE rel16 D N.S. Valid Jump near if parity even (PF=1). Not supported in 64-bit mode.
0F 8A cd JPE rel32 D Valid Valid Jump near if parity even (PF=1).

JPO:
7B cb JPO rel8 D Valid Valid Jump short if parity odd (PF=0).
0F 8B cw JPO rel16 D N.S. Valid Jump near if parity odd (PF=0). Not supported in 64-bit mode.
0F 8B cd JPO rel32 D Valid Valid Jump near if parity odd (PF=0).

JS:
78 cb JS rel8 D Valid Valid Jump short if sign (SF=1).
0F 88 cw JS rel16 D N.S. Valid Jump near if sign (SF=1). Not supported in 64-bit mode.
0F 88 cd JS rel32 D Valid Valid Jump near if sign (SF=1).

JZ:
74 cb JZ rel8 D Valid Valid Jump short if zero (ZF = 1).
0F 84 cw JZ rel16 D N.S. Valid Jump near if 0 (ZF=1). Not supported in 64-bit mode.
0F 84 cd JZ rel32 D Valid Valid Jump near if 0 (ZF=1).


CALL:
E8 cw CALL rel16 D N.S. Valid Call near, relative, displacement relative to next instruction.
E8 cd CALL rel32 D Valid Valid Call near, relative, displacement relative to next instruction. 32-bit displacement sign extended to 64-bits in 64-bit mode.
FF /2 CALL r/m16 M N.E. Valid Call near, absolute indirect, address given in r/m16.
FF /2 CALL r/m32 M N.E. Valid Call near, absolute indirect, address given in r/m32.
FF /2 CALL r/m64 M Valid N.E. Call near, absolute indirect, address given in r/m64.
9A cd CALL ptr16:16 D Invalid Valid Call far, absolute, address given in operand.
9A cp CALL ptr16:32 D Invalid Valid Call far, absolute, address given in operand.
FF /3 CALL m16:16 M Valid Valid Call far, absolute indirect address given in m16:16. In 32-bit mode: if selector points to a gate, then RIP = 32-bit zero extended displacement taken from gate; else RIP = zero extended 16-bit offset from far pointer referenced in the instruction.
FF /3 CALL m16:32 M Valid Valid In 64-bit mode: If selector points to a gate, then RIP = 64-bit displacement taken from gate; else RIP = zero extended 32-bit offset from far pointer referenced in the instruction.
REX.W FF /3 CALL m16:64 M Valid N.E. In 64-bit mode: If selector points to a gate, then RIP = 64-bit displacement taken from gate; else RIP = 64-bit offset from far pointer referenced in the instruction. 

RET:
C3 RET ZO Valid Valid Near return to calling procedure.
CB RET ZO Valid Valid Far return to calling procedure.
C2 iw RET imm16 I Valid Valid Near return to calling procedure and pop imm16 bytes from stack.
CA iw RET imm16 I Valid Valid Far return to calling procedure and pop imm16 bytes from stack.

INT:
CD ib INT imm8 I Valid Valid Generate software interrupt with vector specified by immediate byte.

