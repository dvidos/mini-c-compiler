    global data "counter", 4 bytes = 0x0000fffe
    global data "numbers", 40 bytes
    global_ro data "message", 13 bytes = "Hello world!"
    global_ro data "__str_1", 23 bytes = "fibonacci of %d is %d\n"
    global_ro data "__str_2", 23 bytes = "factorial of %d is %d\n"

function "get_next_counter_value" () -> 4
    r1 = counter
    r2 = 1
    counter = r1 + r2
    r3 = counter
    return r3
    function end


function "rect_area" (width:4, height:4) -> 4
    r5 = width
    r6 = height
    r4 = r5 * r6
    return r4
    function end


function "triangle_area" (width:4, height:4) -> 4
    r8 = width
    r10 = height
    r11 = 2
    r9 = r10 / r11
    r7 = r8 * r9
    return r7
    function end


function "circle_area" (radius:4) -> 4
    r13 = 3
    r15 = radius
    r16 = radius
    r14 = r15 * r16
    r12 = r13 * r14
    return r12
    function end


function "fibonacci" (n:4) -> 4
    if n > 2 goto if_3_end
    r17 = n
    return r17
if_3_end:
    r21 = n
    r22 = 1
    r20 = r21 - r22
    r19 = call fibonacci passing r20
    r25 = n
    r26 = 2
    r24 = r25 - r26
    r23 = call fibonacci passing r24
    r18 = r19 + r23
    return r18
    function end


function "factorial" (n:4) -> 4
    if n > 1 goto if_4_end
    r27 = n
    return r27
if_4_end:
    r29 = n
    r32 = n
    r33 = 1
    r31 = r32 - r33
    r30 = call factorial passing r31
    r28 = r29 * r30
    return r28
    function end


function "math_demo" () -> 0
    local data "i", 4 bytes
    i = 0
while_5_begin:
    r35 = i
    i = r35 + 1
    r34 = r35
    if r34 >= 0xa goto while_5_end
    r36 = __str_1
    r37 = i
    r39 = i
    r38 = call fibonacci passing r39
    call printf passing r36, r37, r38
    goto while_5_begin
while_5_end:
    i = 0
while_6_begin:
    r41 = i
    i = r41 + 1
    r40 = r41
    if r40 >= 0xa goto while_6_end
    r42 = __str_2
    r43 = i
    r45 = i
    r44 = call factorial passing r45
    call printf passing r42, r43, r44
    goto while_6_begin
while_6_end:
    function end


function "nested_loops_test" () -> 0
    local data "outer", 4 bytes
    local data "inner", 4 bytes
    outer = 0xa
while_7_begin:
    if outer <= 0 goto while_7_end
    inner = 0xf
while_8_begin:
    if inner <= 0 goto while_8_end
    r46 = inner
    inner = r46 - 1
    (null) = r46
    goto while_8_begin
while_8_end:
    r47 = outer
    outer = r47 - 1
    (null) = r47
    goto while_7_begin
while_7_end:
    function end


function "test_pre_post_inc_dec" () -> 0
    local data "a", 4 bytes
    local data "b", 4 bytes
    local data "c", 4 bytes
    local data "d", 4 bytes
    local data "result", 4 bytes
    a = 8
    r48 = a
    a = r48 + 1
    result = r48
    b = 8
    r49 = b
    b = r49 + 1
    result = b
    c = 8
    r50 = c
    c = r50 - 1
    result = r50
    d = 8
    r51 = d
    d = r51 - 1
    result = d
    function end


function "main" (argc:4, argv:4) -> 0
    local data "a", 4 bytes
    local data "b", 4 bytes
    local data "c", 1 bytes
    local data "d", 4 bytes
    local data "buffer", 16 bytes
    a = 1
    r52 = a
    r53 = 2
    b = r52 + r53
    call math_demo
    function end

